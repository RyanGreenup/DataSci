ln(2)
log(2)
price <- house.df$price
sqm <- house.df$sqm
predict(lm(sqm~price), data.frame(sqm=210), interval = "confidence")
price <- house.df$price
if(require('pacman')){
library('pacman')
}else{
install.packages('pacman')
library('pacman')
}
pacman::p_load(xts, ggplot2, rmarkdown, reshape2, ggmap,
RColorBrewer, parallel, dplyr, plotly)
house.df <- read.csv(file = "house2018.csv", header = TRUE, sep = ",")
head(house.df)
plot.house <- function() {
plot(x = house.df$sqm, y = house.df$price,
type = "p", main = "House Prices",
xlab = "Property size (sqm)", ylab = "Price ($)",
frame.plot = TRUE, axes = TRUE,
col = "Indianred", pch = 16, cex = 2)
}
plot.house()
house.lm <- lm(house.df$price ~ house.df$sqm)
summary(house.lm)
plot.house.lm <- function(lm = TRUE) {
plot.house()
if(lm == TRUE) {
abline(house.lm, col = "royalblue", lwd = 3, lty = 6)
}
}
plot.house.lm(lm = TRUE)
ggplot(house.df, aes(x = sqm, y = price, shape = nbhd, label = brick, col = (bathrooms+ bedrooms))) +
geom_point(size = 2) +
guides(col = guide_legend(title = "Bathrooms + Bedrooms")) +
guides(shape = guide_legend(title = "Neighbourhood")) +
xlab("Size (sqm)") +
ylab("Price $") +
ggtitle("House Prices") +
geom_abline(slope = house.lm$coefficients[2],
intercept = house.lm$coefficients[1],
lwd = 1, col = "indianred") +
theme_classic()
house.mlm <- lm(house.df$price ~ house.df$offers + house.df$ sqm + house.df$bedrooms + house.df$bathrooms)
summary(house.mlm)
price <- house.df$price
sqm <- house.df$sqm
predict(lm(sqm~price), data.frame(sqm=210), interval = "confidence")
house.melt <- melt(house.df[, -c(1:5)], id = c("price"))
head(house.melt, 3)
ggplot(house.melt, aes(x = price, y = value, col = variable)) +
geom_point() +
xlab("Price ($)") +
ylab("No. of Rooms") +
ggtitle("Rooms and Housing Cost") +
theme_bw()
data.frame(sqm=210)
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "confidence")
predict(house.lm, data.frame(house$sqm=210), interval = "confidence")
data.frame(house$sqm=210)
house.df
nbhd      <- house.df$nbhd
offers    <- house.df$offers
brick     <- house.df$brick
bedrooms  <- house.df$bedrooms
bathrooms <- house.df$bathrooms
price     <- house.df$price
house.lm <- lm(price ~ sqm)
summary(house.lm)
#always use assignments when using the predict() function
price <- house.df$price
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "confidence")
house.mlm <- lm(price ~ offers + sqm + bedrooms + bathrooms)
summary(house.mlm)
predict(house.mlm, data.frame(sqm = 210), interval = "confidence")
predict(house.mlm, data.frame(offers = mean(offers), sqm = 210, bedrooms = mean(bedrooms), bathrooms = mean(bathrooms)), interval = "confidence")
predict(house.mlm, data.frame(offers = mean(offers), sqm = 210, bedrooms = mean(bedrooms), bathrooms = mean(bathrooms)), interval = "prediction")
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "prediction")
if(require('pacman')){
library('pacman')
}else{
install.packages('pacman')
library('pacman')
}
pacman::p_load(xts, ggplot2, rmarkdown, reshape2, ggmap,
RColorBrewer, parallel, dplyr, plotly)
house.df <- read.csv(file = "house2018.csv", header = TRUE, sep = ",")
head(house.df)
plot.house <- function() {
plot(x = house.df$sqm, y = house.df$price,
type = "p", main = "House Prices",
xlab = "Property size (sqm)", ylab = "Price ($)",
frame.plot = TRUE, axes = TRUE,
col = "Indianred", pch = 16, cex = 2)
}
plot.house()
nbhd      <- house.df$nbhd
offers    <- house.df$offers
sqm       <- house.df$sqm
brick     <- house.df$brick
bedrooms  <- house.df$bedrooms
bathrooms <- house.df$bathrooms
price     <- house.df$price
house.lm <- lm(price ~ sqm)
summary(house.lm)
plot.house.lm <- function(lm = TRUE) {
plot.house()
if(lm == TRUE) {
abline(house.lm, col = "royalblue", lwd = 3, lty = 6)
}
}
plot.house.lm(lm = TRUE)
ggplot(house.df, aes(x = sqm, y = price, shape = nbhd, label = brick, col = (bathrooms+ bedrooms))) +
geom_point(size = 2) +
guides(col = guide_legend(title = "Bathrooms + Bedrooms")) +
guides(shape = guide_legend(title = "Neighbourhood")) +
xlab("Size (sqm)") +
ylab("Price $") +
ggtitle("House Prices") +
geom_abline(slope = house.lm$coefficients[2],
intercept = house.lm$coefficients[1],
lwd = 1, col = "indianred") +
theme_classic()
house.mlm <- lm(price ~ offers + sqm + bedrooms + bathrooms)
summary(house.mlm)
#always use assignments when using the predict() function
price <- house.df$price
sqm   <- house.df$sqm
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "prediction")
predict(house.mlm, data.frame(offers = mean(offers), sqm = 210, bedrooms = mean(bedrooms), bathrooms = mean(bathrooms)), interval = "prediction")
house.melt <- melt(house.df[, -c(1:5)], id = c("price"))
head(house.melt, 3)
ggplot(house.melt, aes(x = price, y = value, col = variable)) +
geom_point() +
xlab("Price ($)") +
ylab("No. of Rooms") +
ggtitle("Rooms and Housing Cost") +
theme_bw()
house.lm$coefficients
house.lm$coefficients[2] * 15
paste("$", house.lm$coefficients[2] * 15)
paste("$", house.lm$coefficients[2] * 15) %>% round()
paste("$", house.lm$coefficients[2] * 15 %>% round())
paste("$", round(house.lm$coefficients[2]) * 15 )
if(require('pacman')){
library('pacman')
}else{
install.packages('pacman')
library('pacman')
}
pacman::p_load(xts, ggplot2, rmarkdown, reshape2, ggmap,
RColorBrewer, parallel, dplyr, plotly)
house.df <- read.csv(file = "house2018.csv", header = TRUE, sep = ",")
head(house.df)
plot.house <- function() {
plot(x = house.df$sqm, y = house.df$price,
type = "p", main = "House Prices",
xlab = "Property size (sqm)", ylab = "Price ($)",
frame.plot = TRUE, axes = TRUE,
col = "Indianred", pch = 16, cex = 2)
}
plot.house()
nbhd      <- house.df$nbhd
offers    <- house.df$offers
sqm       <- house.df$sqm
brick     <- house.df$brick
bedrooms  <- house.df$bedrooms
bathrooms <- house.df$bathrooms
price     <- house.df$price
house.lm <- lm(price ~ sqm)
summary(house.lm)
plot.house.lm <- function(lm = TRUE) {
plot.house()
if(lm == TRUE) {
abline(house.lm, col = "royalblue", lwd = 3, lty = 6)
}
}
plot.house.lm(lm = TRUE)
ggplot(house.df, aes(x = sqm, y = price, shape = nbhd, label = brick, col = (bathrooms+ bedrooms))) +
geom_point(size = 2) +
guides(col = guide_legend(title = "Bathrooms + Bedrooms")) +
guides(shape = guide_legend(title = "Neighbourhood")) +
xlab("Size (sqm)") +
ylab("Price $") +
ggtitle("House Prices") +
geom_abline(slope = house.lm$coefficients[2],
intercept = house.lm$coefficients[1],
lwd = 1, col = "indianred") +
theme_classic()
house.mlm <- lm(price ~ offers + sqm + bedrooms + bathrooms)
summary(house.mlm)
#always use assignments when using the predict() function
price <- house.df$price
sqm   <- house.df$sqm
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "prediction")
predict(house.mlm, data.frame(offers = mean(offers), sqm = 210, bedrooms = mean(bedrooms), bathrooms = mean(bathrooms)), interval = "prediction")
paste("$", round(house.lm$coefficients[2]) * 15)
house.melt <- melt(house.df[, -c(1:5)], id = c("price"))
head(house.melt, 3)
ggplot(house.melt, aes(x = price, y = value, col = variable)) +
geom_point() +
xlab("Price ($)") +
ylab("No. of Rooms") +
ggtitle("Rooms and Housing Cost") +
theme_bw()
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "prediction", level = 0.95)
if(require('pacman')){
library('pacman')
}else{
install.packages('pacman')
library('pacman')
}
pacman::p_load(xts, ggplot2, rmarkdown, reshape2, ggmap,
RColorBrewer, parallel, dplyr, plotly)
house.df <- read.csv(file = "house2018.csv", header = TRUE, sep = ",")
head(house.df)
plot.house <- function() {
plot(x = house.df$sqm, y = house.df$price,
type = "p", main = "House Prices",
xlab = "Property size (sqm)", ylab = "Price ($)",
frame.plot = TRUE, axes = TRUE,
col = "Indianred", pch = 16, cex = 2)
}
plot.house()
nbhd      <- house.df$nbhd
offers    <- house.df$offers
sqm       <- house.df$sqm
brick     <- house.df$brick
bedrooms  <- house.df$bedrooms
bathrooms <- house.df$bathrooms
price     <- house.df$price
house.lm <- lm(price ~ sqm)
summary(house.lm)
plot.house.lm <- function(lm = TRUE) {
plot.house()
if(lm == TRUE) {
abline(house.lm, col = "royalblue", lwd = 3, lty = 6)
}
}
plot.house.lm(lm = TRUE)
ggplot(house.df, aes(x = sqm, y = price, shape = nbhd, label = brick, col = (bathrooms+ bedrooms))) +
geom_point(size = 2) +
guides(col = guide_legend(title = "Bathrooms + Bedrooms")) +
guides(shape = guide_legend(title = "Neighbourhood")) +
xlab("Size (sqm)") +
ylab("Price $") +
ggtitle("House Prices") +
geom_abline(slope = house.lm$coefficients[2],
intercept = house.lm$coefficients[1],
lwd = 1, col = "indianred") +
theme_classic()
house.mlm <- lm(price ~ offers + sqm + bedrooms + bathrooms)
summary(house.mlm)
#always use assignments when using the predict() function
price <- house.df$price
sqm   <- house.df$sqm
predict(lm(price ~ sqm), data.frame(sqm=210), interval = "prediction", level = 0.95)
predict(house.mlm, data.frame(offers = mean(offers), sqm = 210, bedrooms = mean(bedrooms), bathrooms = mean(bathrooms)), interval = "prediction", level = 0.95)
paste("$", round(house.lm$coefficients[2]) * 15)
house.melt <- melt(house.df[, -c(1:5)], id = c("price"))
head(house.melt, 3)
ggplot(house.melt, aes(x = price, y = value, col = variable)) +
geom_point() +
xlab("Price ($)") +
ylab("No. of Rooms") +
ggtitle("Rooms and Housing Cost") +
theme_bw()
library(dplyr)
source('~/.active-rstudio-document', echo=TRUE)
as.vector(m*a+n*b)
as.vector(m*a+n*b) %>% min()
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
temps <- (data.frame("Celsius" = Ct, "Fahrenheit" = Ft))
temps
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
Ft <- c(1.8*Ct + 30 + error)) #Length of Class
Ft <- c(1.8*Ct + 30 + error) #Length of Class
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
source('E:/One Drive/OneDrive - Western Sydney University/Education/University of Western Sydney/Units/2018/Autumn/Predictive Modelling (301034)/Weekly Material/Week 2, Gradient Descent/Explanation/Plots.R', echo=TRUE)
View(temps)
temps.lm <- lm(Ft~Ct)
ggplot(data = temps, aes(x = Celsius, y = Fahrenheit)) +
geom_point(size = 4, col = "royalblue") +
theme_classic() +
ggtitle("Comparison of various temperatures") +
geom_abline(slope = temps.lm)
temps.lm
ggplot(data = temps, aes(x = Celsius, y = Fahrenheit)) +
geom_point(size = 4, col = "royalblue") +
theme_classic() +
ggtitle("Comparison of various temperatures") +
geom_abline(slope = temps.lm$coefficients[1], intercept = temps.lm$coefficients[2])
ggplot(data = temps, aes(x = Celsius, y = Fahrenheit)) +
geom_point(size = 4, col = "royalblue") +
theme_classic() +
ggtitle("Comparison of various temperatures") +
geom_abline(slope = temps.lm$coefficients[2], intercept = temps.lm$coefficients[1])
ggplot(data = temps, aes(x = Celsius, y = Fahrenheit)) +
geom_point(size = 4, col = "royalblue") +
theme_classic() +
ggtitle("Comparison of various temperatures") +
geom_abline(slope = temps.lm$coefficients[2], intercept = temps.lm$coefficients[1], col = "indianred", lwd =3)
ggplot(data = temps, aes(x = Celsius, y = Fahrenheit)) +
geom_point(size = 4, col = "royalblue") +
theme_classic() +
ggtitle("Comparison of various temperatures") +
geom_abline(slope = temps.lm$coefficients[2], intercept = temps.lm$coefficients[1], col = "indianred", lwd =2)
ggplot(data = temps, aes(x = Celsius, y = Fahrenheit)) +
geom_point(size = 4, col = "royalblue") +
theme_classic() +
ggtitle("Comparison of various temperatures") +
geom_abline(slope = temps.lm$coefficients[2],
intercept = temps.lm$coefficients[1],
col = "indianred", lwd =2)
source('C:/Users/Ryan/Desktop/temp.R', echo=TRUE)
source('C:/Users/Ryan/Desktop/temp.R', echo=TRUE)
